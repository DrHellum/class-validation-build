{"version":3,"sources":["../../src/validation/ValidationUtils.ts"],"names":[],"mappings":";;AAEA;IAAA;IA6BA,CAAC;IA3BU,2CAA2B,GAAlC,UAAmC,OAAuD,EAC9D,mBAAwC;QAEhE,IAAI,aAAqB,CAAC;QAC1B,EAAE,CAAC,CAAC,OAAO,YAAY,QAAQ,CAAC,CAAC,CAAC;YAC9B,aAAa,GAAI,OAAiD,CAAC,mBAAmB,CAAC,CAAC;QAE5F,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC;YACrC,aAAa,GAAG,OAAiB,CAAC;QACtC,CAAC;QAED,EAAE,CAAC,CAAC,aAAa,IAAI,mBAAmB,CAAC,WAAW,YAAY,KAAK,CAAC,CAAC,CAAC;YACpE,mBAAmB,CAAC,WAAW,CAAC,OAAO,CAAC,UAAC,UAAU,EAAE,KAAK;gBACtD,aAAa,GAAG,aAAa,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,mBAAgB,KAAK,GAAG,CAAC,CAAE,EAAE,GAAG,CAAC,EAAE,UAAU,CAAC,CAAC;YACpG,CAAC,CAAC,CAAC;QACP,CAAC;QAED,EAAE,CAAC,CAAC,aAAa,IAAI,mBAAmB,CAAC,KAAK,KAAK,SAAS,IAAI,mBAAmB,CAAC,KAAK,KAAK,IAAI,CAAC;YAC/F,aAAa,GAAG,aAAa,CAAC,OAAO,CAAC,UAAU,EAAE,mBAAmB,CAAC,KAAK,CAAC,CAAC;QACjF,EAAE,CAAC,CAAC,aAAa,CAAC;YACd,aAAa,GAAG,aAAa,CAAC,OAAO,CAAC,aAAa,EAAE,mBAAmB,CAAC,QAAQ,CAAC,CAAC;QACvF,EAAE,CAAC,CAAC,aAAa,CAAC;YACd,aAAa,GAAG,aAAa,CAAC,OAAO,CAAC,WAAW,EAAE,mBAAmB,CAAC,UAAU,CAAC,CAAC;QAEvF,MAAM,CAAC,aAAa,CAAC;IACzB,CAAC;IAEL,sBAAC;AAAD,CA7BA,AA6BC,IAAA;AA7BY,0CAAe","file":"ValidationUtils.js","sourcesContent":["import {ValidationArguments} from \"./ValidationArguments\";\r\n\r\nexport class ValidationUtils {\r\n\r\n    static replaceMessageSpecialTokens(message: string|((args: ValidationArguments) => string),\r\n                                validationArguments: ValidationArguments): string {\r\n\r\n        let messageString: string;\r\n        if (message instanceof Function) {\r\n            messageString = (message as (args: ValidationArguments) => string)(validationArguments);\r\n\r\n        } else if (typeof message === \"string\") {\r\n            messageString = message as string;\r\n        }\r\n\r\n        if (messageString && validationArguments.constraints instanceof Array) {\r\n            validationArguments.constraints.forEach((constraint, index) => {\r\n                messageString = messageString.replace(new RegExp(`\\\\$constraint${index + 1}`, \"g\"), constraint);\r\n            });\r\n        }\r\n\r\n        if (messageString && validationArguments.value !== undefined && validationArguments.value !== null)\r\n            messageString = messageString.replace(/\\$value/g, validationArguments.value);\r\n        if (messageString)\r\n            messageString = messageString.replace(/\\$property/g, validationArguments.property);\r\n        if (messageString)\r\n            messageString = messageString.replace(/\\$target/g, validationArguments.targetName);\r\n\r\n        return messageString;\r\n    }\r\n    \r\n}"],"sourceRoot":".."}