{"version":3,"sources":["../../src/validation/ValidationTypes.ts"],"names":[],"mappings":"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","file":"ValidationTypes.js","sourcesContent":["import {ValidationArguments} from \"./ValidationArguments\";\r\n\r\n/**\r\n * Validation types.\r\n */\r\nexport class ValidationTypes {\r\n    \r\n    /* system */\r\n    static CUSTOM_VALIDATION = \"customValidation\";\r\n    static NESTED_VALIDATION = \"nestedValidation\";\r\n    static CONDITIONAL_VALIDATION = \"conditionalValidation\";\r\n\r\n    /* common checkers */\r\n    static IS_DEFINED = \"isDefined\";\r\n    static EQUALS = \"equals\";\r\n    static NOT_EQUALS = \"notEquals\";\r\n    static IS_EMPTY = \"isEmpty\";\r\n    static IS_NOT_EMPTY = \"isNotEmpty\";\r\n    static IS_IN = \"isIn\";\r\n    static IS_NOT_IN = \"isNotIn\";\r\n\r\n    /* type checkers */\r\n    static IS_BOOLEAN = \"isBoolean\";\r\n    static IS_DATE = \"isDate\";\r\n    static IS_NUMBER = \"isNumber\";\r\n    static IS_STRING = \"isString\";\r\n    static IS_ARRAY = \"isArray\";\r\n    static IS_INT = \"isInt\";\r\n    static IS_ENUM = \"isEnum\";\r\n\r\n    /* number checkers */\r\n    static IS_DIVISIBLE_BY = \"isDivisibleBy\";\r\n    static IS_POSITIVE = \"isPositive\";\r\n    static IS_NEGATIVE = \"isNegative\";\r\n    static MIN = \"min\";\r\n    static MAX = \"max\";\r\n\r\n    /* date checkers */\r\n    static MIN_DATE = \"minDate\";\r\n    static MAX_DATE = \"maxDate\";\r\n\r\n    /* string-as-type checkers */\r\n    static IS_BOOLEAN_STRING = \"isBooleanString\";\r\n    static IS_NUMBER_STRING = \"isNumberString\";\r\n\r\n    /* string checkers */\r\n    static CONTAINS = \"contains\";\r\n    static NOT_CONTAINS = \"notContains\";\r\n    static IS_ALPHA = \"isAlpha\";\r\n    static IS_ALPHANUMERIC = \"isAlphanumeric\";\r\n    static IS_ASCII = \"isAscii\";\r\n    static IS_BASE64 = \"isBase64\";\r\n    static IS_BYTE_LENGTH = \"isByteLength\";\r\n    static IS_CREDIT_CARD = \"isCreditCard\";\r\n    static IS_CURRENCY = \"isCurrency\";\r\n    static IS_EMAIL = \"isEmail\";\r\n    static IS_FQDN = \"isFqdn\";\r\n    static IS_FULL_WIDTH = \"isFullWidth\";\r\n    static IS_HALF_WIDTH = \"isHalfWidth\";\r\n    static IS_VARIABLE_WIDTH = \"isVariableWidth\";\r\n    static IS_HEX_COLOR = \"isHexColor\";\r\n    static IS_HEXADECIMAL = \"isHexadecimal\";\r\n    static IS_IP = \"isIp\";\r\n    static IS_ISBN = \"isIsbn\";\r\n    static IS_ISIN = \"isIsin\";\r\n    static IS_ISO8601 = \"isIso8601\";\r\n    static IS_JSON = \"isJson\";\r\n    static IS_LOWERCASE = \"isLowercase\";\r\n    static IS_MOBILE_PHONE = \"isMobilePhone\";\r\n    static IS_MONGO_ID = \"isMongoId\";\r\n    static IS_MULTIBYTE = \"isMultibyte\";\r\n    static IS_SURROGATE_PAIR = \"isSurrogatePair\";\r\n    static IS_URL = \"isUrl\";\r\n    static IS_UUID = \"isUuid\";\r\n    static LENGTH = \"length\";\r\n    static IS_UPPERCASE = \"isUppercase\";\r\n    static MIN_LENGTH = \"minLength\";\r\n    static MAX_LENGTH = \"maxLength\";\r\n    static MATCHES = \"matches\";\r\n    static IS_MILITARY_TIME = \"isMilitaryTime\";\r\n\r\n    /* array checkers */\r\n    static ARRAY_CONTAINS = \"arrayContains\";\r\n    static ARRAY_NOT_CONTAINS = \"arrayNotContains\";\r\n    static ARRAY_NOT_EMPTY = \"arrayNotEmpty\";\r\n    static ARRAY_MIN_SIZE = \"arrayMinSize\";\r\n    static ARRAY_MAX_SIZE = \"arrayMaxSize\";\r\n    static ARRAY_UNIQUE = \"arrayUnique\";\r\n\r\n    /**\r\n     * Checks if validation type is valid.\r\n     */\r\n    static isValid(type: string) {\r\n        return  type !== \"isValid\" &&\r\n                type !== \"getMessage\" &&\r\n                Object.keys(this).map(key => (this as any)[key]).indexOf(type) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Gets default validation error message for the given validation type.\r\n     */\r\n    static getMessage(type: string, isEach: boolean): string|((args: ValidationArguments) => string) {\r\n        const eachPrefix = isEach ? \"each value in \" : \"\";\r\n        switch (type) {\r\n\r\n            /* common checkers */\r\n            case this.IS_DEFINED:\r\n                return eachPrefix + \"$property should not be null or undefined\";\r\n            case this.EQUALS:\r\n                return eachPrefix + \"$property must be equal to $constraint1\";\r\n            case this.NOT_EQUALS:\r\n                return eachPrefix + \"$property should not be equal to $constraint1\";\r\n            case this.IS_EMPTY:\r\n                return eachPrefix + \"$property must be empty\";\r\n            case this.IS_NOT_EMPTY:\r\n                return eachPrefix + \"$property should not be empty\";\r\n            case this.IS_IN:\r\n                return eachPrefix + \"$property must be one of the following values: $constraint1\";\r\n            case this.IS_NOT_IN:\r\n                return eachPrefix + \"$property should not be one of the following values: $constraint1\";\r\n\r\n            /* type checkers */\r\n            case this.IS_BOOLEAN:\r\n                return eachPrefix + \"$property must be a boolean value\";\r\n            case this.IS_DATE:\r\n                return eachPrefix + \"$property must be a Date instance\";\r\n            case this.IS_NUMBER:\r\n                return eachPrefix + \"$property must be a number\";\r\n            case this.IS_INT:\r\n                return eachPrefix + \"$property must be an integer number\";\r\n            case this.IS_STRING:\r\n                return eachPrefix + \"$property must be a string\";\r\n            case this.IS_ARRAY:\r\n                return eachPrefix + \"$property must be an array\";\r\n            case this.IS_ENUM:\r\n                return eachPrefix + \"$property must be a valid enum value\";\r\n\r\n            /* number checkers */\r\n            case this.IS_DIVISIBLE_BY:\r\n                return eachPrefix + \"$property must be divisible by $constraint1\";\r\n            case this.IS_POSITIVE:\r\n                return eachPrefix + \"$property must be a positive number\";\r\n            case this.IS_NEGATIVE:\r\n                return eachPrefix + \"$property must be a negative number\";\r\n            case this.MIN:\r\n                return eachPrefix + \"$property must be greater than $constraint1\";\r\n            case this.MAX:\r\n                return eachPrefix + \"$property must be less than $constraint1\";\r\n\r\n            /* date checkers */\r\n            case this.MIN_DATE:\r\n                return \"minimal allowed date for \" + eachPrefix + \"$property is $constraint1\";\r\n            case this.MAX_DATE:\r\n                return \"maximal allowed date for \" + eachPrefix + \"$property is $constraint1\";\r\n\r\n            /* string-as-type checkers */\r\n            case this.IS_BOOLEAN_STRING:\r\n                return eachPrefix + \"$property must be a boolean string\";\r\n            case this.IS_NUMBER_STRING:\r\n                return eachPrefix + \"$property must be a number string\";\r\n\r\n            /* string checkers */\r\n            case this.CONTAINS:\r\n                return eachPrefix + \"$property must contain a $constraint1 string\";\r\n            case this.NOT_CONTAINS:\r\n                return eachPrefix + \"$property should not contain a $constraint1 string\";\r\n            case this.IS_ALPHA:\r\n                return eachPrefix + \"$property must contain only letters (a-zA-Z)\";\r\n            case this.IS_ALPHANUMERIC:\r\n                return eachPrefix + \"$property must contain only letters and numbers\";\r\n            case this.IS_ASCII:\r\n                return eachPrefix + \"$property must contain only ASCII characters\";\r\n            case this.IS_BASE64:\r\n                return eachPrefix + \"$property must be base64 encoded\";\r\n            case this.IS_BYTE_LENGTH:\r\n                return eachPrefix + \"$property's byte length must fall into ($constraint1, $constraint2) range\";\r\n            case this.IS_CREDIT_CARD:\r\n                return eachPrefix + \"$property must be a credit card\";\r\n            case this.IS_CURRENCY:\r\n                return eachPrefix + \"$property must be a currency\";\r\n            case this.IS_EMAIL:\r\n                return eachPrefix + \"$property must be an email\";\r\n            case this.IS_FQDN:\r\n                return eachPrefix + \"$property must be a valid domain name\";\r\n            case this.IS_FULL_WIDTH:\r\n                return eachPrefix + \"$property must contain a full-width characters\";\r\n            case this.IS_HALF_WIDTH:\r\n                return eachPrefix + \"$property must contain a half-width characters\";\r\n            case this.IS_VARIABLE_WIDTH:\r\n                return eachPrefix + \"$property must contain a full-width and half-width characters\";\r\n            case this.IS_HEX_COLOR:\r\n                return eachPrefix + \"$property must be a hexadecimal color\";\r\n            case this.IS_HEXADECIMAL:\r\n                return eachPrefix + \"$property must be a hexadecimal number\";\r\n            case this.IS_IP:\r\n                return eachPrefix + \"$property must be an ip address\";\r\n            case this.IS_ISBN:\r\n                return eachPrefix + \"$property must be an ISBN\";\r\n            case this.IS_ISIN:\r\n                return eachPrefix + \"$property must be an ISIN (stock/security identifier)\";\r\n            case this.IS_ISO8601:\r\n                return eachPrefix + \"$property must be a valid ISO 8601 date string\";\r\n            case this.IS_JSON:\r\n                return eachPrefix + \"$property must be a json string\";\r\n            case this.IS_LOWERCASE:\r\n                return eachPrefix + \"$property must be a lowercase string\";\r\n            case this.IS_MOBILE_PHONE:\r\n                return eachPrefix + \"$property must be a phone number\";\r\n            case this.IS_MONGO_ID:\r\n                return eachPrefix + \"$property must be a mongodb id\";\r\n            case this.IS_MULTIBYTE:\r\n                return eachPrefix + \"$property must contain one or more multibyte chars\";\r\n            case this.IS_SURROGATE_PAIR:\r\n                return eachPrefix + \"$property must contain any surrogate pairs chars\";\r\n            case this.IS_URL:\r\n                return eachPrefix + \"$property must be an URL address\";\r\n            case this.IS_UUID:\r\n                return eachPrefix + \"$property must be an UUID\";\r\n            case this.IS_UPPERCASE:\r\n                return eachPrefix + \"$property must be uppercase\";\r\n            case this.LENGTH:\r\n                return (args: ValidationArguments) => {\r\n                    const isMinLength = args.constraints[0] !== null && args.constraints[0] !== undefined;\r\n                    const isMaxLength = args.constraints[1] !== null && args.constraints[1] !== undefined;\r\n                    if (isMinLength && (!args.value || args.value.length < args.constraints[0])) {\r\n                        return eachPrefix + \"$property must be longer than $constraint1 characters\";\r\n                    } else if (isMaxLength && (args.value.length > args.constraints[1])) {\r\n                        return eachPrefix + \"$property must be shorter than $constraint2 characters\";\r\n                    }\r\n                    return eachPrefix + \"$property must be longer than $constraint1 and shorter than $constraint2 characters\";\r\n                };\r\n            case this.MIN_LENGTH:\r\n                return eachPrefix + \"$property must be longer than $constraint1 characters\";\r\n            case this.MAX_LENGTH:\r\n                return eachPrefix + \"$property must be shorter than $constraint1 characters\";\r\n            case this.MATCHES:\r\n                return eachPrefix + \"$property must match $constraint1 regular expression\";\r\n\r\n            /* array checkers */\r\n            case this.ARRAY_CONTAINS:\r\n                return eachPrefix + \"$property must contain $constraint1 values\";\r\n            case this.ARRAY_NOT_CONTAINS:\r\n                return eachPrefix + \"$property should not contain $constraint1 values\";\r\n            case this.ARRAY_NOT_EMPTY:\r\n                return eachPrefix + \"$property should not be empty\";\r\n            case this.ARRAY_MIN_SIZE:\r\n                return eachPrefix + \"$property must contain at least $constraint1 elements\";\r\n            case this.ARRAY_MAX_SIZE:\r\n                return eachPrefix + \"$property must contain not more than $constraint1 elements\";\r\n            case this.ARRAY_UNIQUE:\r\n                return eachPrefix + \"All $property's elements must be unique\";\r\n        }\r\n        \r\n        return \"\";\r\n    }\r\n    \r\n}\r\n"],"sourceRoot":".."}