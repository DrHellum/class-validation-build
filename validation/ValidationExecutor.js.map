{"version":3,"sources":["../../src/validation/ValidationExecutor.ts"],"names":[],"mappings":"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","file":"ValidationExecutor.js","sourcesContent":["import {Validator} from \"./Validator\";\r\nimport {ValidationError} from \"./ValidationError\";\r\nimport {ValidationMetadata} from \"../metadata/ValidationMetadata\";\r\nimport {MetadataStorage} from \"../metadata/MetadataStorage\";\r\nimport {getFromContainer} from \"../index\";\r\nimport {ValidatorOptions} from \"./ValidatorOptions\";\r\nimport {ValidationTypes} from \"./ValidationTypes\";\r\nimport {ConstraintMetadata} from \"../metadata/ConstraintMetadata\";\r\nimport {ValidationArguments} from \"./ValidationArguments\";\r\nimport {ValidationUtils} from \"./ValidationUtils\";\r\n\r\n/**\r\n * Executes validation over given object.\r\n */\r\nexport class ValidationExecutor {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    awaitingPromises: Promise<any>[] = [];\r\n    ignoreAsyncValidations: boolean = false;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    private metadataStorage = getFromContainer(MetadataStorage);\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(private validator: Validator,\r\n                private validatorOptions?: ValidatorOptions) {\r\n    }\r\n    \r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n    \r\n    execute(object: Object, targetSchema: string, validationErrors: ValidationError[]) {\r\n        const groups = this.validatorOptions ? this.validatorOptions.groups : undefined;\r\n        const targetMetadatas = this.metadataStorage.getTargetValidationMetadatas(object.constructor, targetSchema, groups);\r\n        const groupedMetadatas = this.metadataStorage.groupByPropertyName(targetMetadatas);\r\n\r\n        Object.keys(groupedMetadatas).forEach(propertyName => {\r\n            const value = (object as any)[propertyName];\r\n            const definedMetadatas = groupedMetadatas[propertyName].filter(metadata => metadata.type === ValidationTypes.IS_DEFINED);\r\n            const metadatas = groupedMetadatas[propertyName].filter(metadata => metadata.type !== ValidationTypes.IS_DEFINED);\r\n            const customValidationMetadatas = metadatas.filter(metadata => metadata.type === ValidationTypes.CUSTOM_VALIDATION);\r\n            const nestedValidationMetadatas = metadatas.filter(metadata => metadata.type === ValidationTypes.NESTED_VALIDATION);\r\n            const conditionalValidationMetadatas = metadatas.filter(metadata => metadata.type === ValidationTypes.CONDITIONAL_VALIDATION);\r\n\r\n            const validationError = this.generateValidationError(object, value, propertyName);\r\n            validationErrors.push(validationError);\r\n\r\n            const canValidate = this.conditionalValidations(object, value, conditionalValidationMetadatas);\r\n            if (!canValidate) {\r\n                return;\r\n            }\r\n\r\n            // handle IS_DEFINED validation type the special way - it should work no matter skipMissingProperties is set or not\r\n            this.defaultValidations(object, value, definedMetadatas, validationError.constraints);\r\n            \r\n            if ((value === null || value === undefined) && this.validatorOptions && this.validatorOptions.skipMissingProperties === true) {\r\n                return;\r\n            }\r\n\r\n            this.defaultValidations(object, value, metadatas, validationError.constraints);\r\n            this.customValidations(object, value, customValidationMetadatas, validationError.constraints);\r\n            this.nestedValidations(value, nestedValidationMetadatas, validationError.children);\r\n        });\r\n    }\r\n\r\n    stripEmptyErrors(errors: ValidationError[]) {\r\n        return errors.filter(error => {\r\n            if (error.children) {\r\n                error.children = this.stripEmptyErrors(error.children);\r\n            }\r\n\r\n            if (Object.keys(error.constraints).length === 0) {\r\n                if (error.children.length === 0) {\r\n                    return false;\r\n                } else {\r\n                    delete error.constraints;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n    \r\n    // -------------------------------------------------------------------------\r\n    // Private Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    private generateValidationError(object: Object, value: any, propertyName: string) {\r\n        const validationError = new ValidationError();\r\n\r\n        if (!this.validatorOptions ||\r\n            !this.validatorOptions.validationError ||\r\n            this.validatorOptions.validationError.target === undefined ||\r\n            this.validatorOptions.validationError.target === true)\r\n            validationError.target = object;\r\n\r\n        if (!this.validatorOptions ||\r\n            !this.validatorOptions.validationError ||\r\n            this.validatorOptions.validationError.value === undefined ||\r\n            this.validatorOptions.validationError.value === true)\r\n            validationError.value = value;\r\n\r\n        validationError.property = propertyName;\r\n        validationError.children = [];\r\n        validationError.constraints = {};\r\n\r\n        return validationError;\r\n    }\r\n\r\n    private conditionalValidations(object: Object,\r\n                                   value: any,\r\n                                   metadatas: ValidationMetadata[]) {\r\n        return metadatas\r\n            .map(metadata => metadata.constraints[0](object, value))\r\n            .reduce((resultA, resultB) => resultA && resultB, true);\r\n    }\r\n\r\n    private defaultValidations(object: Object,\r\n                               value: any,\r\n                               metadatas: ValidationMetadata[],\r\n                               errorMap: { [key: string]: string }) {\r\n        return metadatas\r\n            .filter(metadata => {\r\n                if (metadata.each) {\r\n                    if (value instanceof Array) {\r\n                        return !value.every((subValue: any) => this.validator.validateValueByMetadata(subValue, metadata));\r\n                    }\r\n\r\n                } else {\r\n                    return !this.validator.validateValueByMetadata(value, metadata);\r\n                }\r\n            })\r\n            .forEach(metadata => {\r\n                const [key, message] = this.createValidationError(object, value, metadata);\r\n                errorMap[key] = message;\r\n            });\r\n    }\r\n\r\n    private customValidations(object: Object,\r\n                              value: any,\r\n                              metadatas: ValidationMetadata[],\r\n                              errorMap: { [key: string]: string }) {\r\n        metadatas.forEach(metadata => {\r\n            getFromContainer(MetadataStorage)\r\n                .getTargetValidatorConstraints(metadata.constraintCls)\r\n                .forEach(customConstraintMetadata => {\r\n                    if (customConstraintMetadata.async && this.ignoreAsyncValidations)\r\n                        return;\r\n\r\n                    const validationArguments: ValidationArguments = {\r\n                        targetName: object.constructor ? (object.constructor as any).name : undefined,\r\n                        property: metadata.propertyName,\r\n                        object: object,\r\n                        value: value,\r\n                        constraints: metadata.constraints\r\n                    };\r\n                    const validatedValue = customConstraintMetadata.instance.validate(value, validationArguments);\r\n                    if (validatedValue instanceof Promise) {\r\n                        const promise = validatedValue.then(isValid => {\r\n                            if (!isValid) {\r\n                                const [type, message] = this.createValidationError(object, value, metadata, customConstraintMetadata);\r\n                                errorMap[type] = message;\r\n                            }\r\n                        });\r\n                        this.awaitingPromises.push(promise);\r\n                    } else {\r\n                        if (!validatedValue) {\r\n                            const [type, message] = this.createValidationError(object, value, metadata, customConstraintMetadata);\r\n                            errorMap[type] = message;\r\n                        }\r\n                    }\r\n                });\r\n        });\r\n    }\r\n    \r\n    private nestedValidations(value: any, metadatas: ValidationMetadata[], errors: ValidationError[]) {\r\n\r\n        if (value === void 0) {\r\n            return;\r\n        }\r\n\r\n        metadatas.forEach(metadata => {\r\n            if (metadata.type !== ValidationTypes.NESTED_VALIDATION) return;\r\n            const targetSchema = typeof metadata.target === \"string\" ? metadata.target as string : undefined;\r\n\r\n            if (value instanceof Array) {\r\n                value.forEach((subValue: any, index: number) => {\r\n                    const validationError = this.generateValidationError(value, subValue, index.toString());\r\n                    errors.push(validationError);\r\n\r\n                    this.execute(subValue, targetSchema, validationError.children);\r\n                });\r\n\r\n            } else if (value instanceof Object) {\r\n                this.execute(value, targetSchema, errors);\r\n\r\n            } else {\r\n                throw new Error(\"Only objects and arrays are supported to nested validation\");\r\n            }\r\n        });\r\n    }\r\n\r\n    private createValidationError(object: Object,\r\n                                  value: any,\r\n                                  metadata: ValidationMetadata,\r\n                                  customValidatorMetadata?: ConstraintMetadata): [string, string] {\r\n        \r\n        const targetName = object.constructor ? (object.constructor as any).name : undefined;\r\n        const type = customValidatorMetadata && customValidatorMetadata.name ? customValidatorMetadata.name : metadata.type;\r\n        const validationArguments: ValidationArguments = {\r\n            targetName: targetName,\r\n            property: metadata.propertyName,\r\n            object: object,\r\n            value: value,\r\n            constraints: metadata.constraints\r\n        };\r\n\r\n        let message = metadata.message;\r\n        if (!metadata.message && \r\n            (!this.validatorOptions || (this.validatorOptions && !this.validatorOptions.dismissDefaultMessages))) {\r\n            if (customValidatorMetadata && customValidatorMetadata.instance.defaultMessage instanceof Function) {\r\n                message = customValidatorMetadata.instance.defaultMessage(validationArguments);\r\n            }\r\n\r\n            if (!message)\r\n                message = ValidationTypes.getMessage(type, metadata.each);\r\n        }\r\n\r\n        const messageString = ValidationUtils.replaceMessageSpecialTokens(message, validationArguments);\r\n        return [type, messageString];\r\n    }\r\n    \r\n}"],"sourceRoot":".."}